#finding the top 10 baltimore communites with highest white student population in 2014
baltimore_white %>%
select(CSA2020, wstud14) %>%
slice_max(wstud14, n = 10) %>%
arrange(desc(wstud14))
#finding the 10 baltimore communities with the lowest white student population in 2014
baltimore_white %>%
select(CSA2020, wstud14) %>%
slice_min(wstud14, n = 10) %>%
arrange(wstud14)
#creating a chart of my table with the top 5 baltimore communites with the highest reading scores
top_5_communities %>%
ggplot() +
coord_flip() +
geom_col(aes(x = reorder(Community.Statistical.Area..CSA., X2014), y = X2014)) +
labs(
title = "Percent of 8th grade students passing MSA reading in 2014",
x = "Communities",
y = "Percent of Students",
caption = "Source: Baltimore Neighborhood Indicator Alliance"
)
#download reading test scores
reading_scores <- read.csv("~/Downloads/read_data.csv")
#finding the top 5 baltimore communites with highest reading scores
reading_scores %>%
select(Community.Statistical.Area..CSA., X2014) %>%
slice_max(X2014, n = 5) %>%
arrange(desc(X2014))
#finding the top 5 baltimore communites with lowest reading scores
reading_scores %>%
select(Community.Statistical.Area..CSA., X2014) %>%
slice_min(X2014, n = 5) %>%
arrange(X2014)
#creating top 5 communities with highest reading score table
top_5_communities <- reading_scores %>%
select(Community.Statistical.Area..CSA., X2014) %>%
slice_max(X2014, n = 5) %>%
arrange(desc(X2014))
#finding the top 5 baltimore communites with highest white student population in 2014
baltimore_white %>%
select(CSA2020, wstud14) %>%
slice_max(wstud14, n = 5) %>%
arrange(desc(wstud14))
#finding the 5 baltimore communities with the lowest white student population in 2014
baltimore_white %>%
select(CSA2020, wstud14) %>%
slice_min(wstud14, n = 5) %>%
arrange(wstud14)
#creating a chart of my table with the top 5 baltimore communites with the highest reading scores
top_5_communities %>%
ggplot() +
coord_flip() +
geom_col(aes(x = reorder(Community.Statistical.Area..CSA., X2014), y = X2014)) +
labs(
title = "Percent of 8th grade students passing MSA reading in 2014",
x = "Communities",
y = "Percent of Students",
caption = "Source: Baltimore Neighborhood Indicator Alliance"
)
#create a column of the percentage change of the white population from 2010-2020
baltimore_white_percent <- baltimore_white %>%
select(CSA2020, wstud11, wstud21) %>%
mutate(diff_pct_wstud = (wstud21-wstud11)/wstud11) %>%
arrange(desc(diff_pct_wstud))
view(baltimore_white)
#find the top 25 communities with the biggest white population increase
baltimore_white %>%
select (CSA2020, diff_pct_wstud) %>%
slice_max (diff_pct_wstud, n = 25)
#create a column of the percentage change of the white population from 2010-2020
baltimore_white_percent <- baltimore_white %>%
select(CSA2020, wstud11, wstud21) %>%
mutate(diff_pct_wstud = (wstud21-wstud11)/wstud11) %>%
arrange(desc(diff_pct_wstud))
view(baltimore_white)
#find the top 25 communities with the biggest white population increase
baltimore_white_percent %>%
select (CSA2020, diff_pct_wstud) %>%
slice_max (diff_pct_wstud, n = 25)
view(baltimore_white)
#find the 25 communities with the biggest white population decrease
baltimore_white_percent %>%
select (CSA2020, diff_pct_wstud) %>%
slice_min (diff_pct_wstud, n = 25)
view(baltimore_white)
#download reading test scores
reading_scores <- read.csv("~/Downloads/read_data.csv")
#finding the top 5 baltimore communites with highest reading scores
reading_scores %>%
select(Community.Statistical.Area..CSA., X2014) %>%
slice_max(X2014, n = 5) %>%
arrange(desc(X2014))
#finding the top 5 baltimore communites with lowest reading scores
reading_scores %>%
select(Community.Statistical.Area..CSA., X2014) %>%
slice_min(X2014, n = 5) %>%
arrange(X2014)
#finding the top 5 baltimore communites with highest white student population in 2014
baltimore_white %>%
select(CSA2020, wstud14) %>%
slice_max(wstud14, n = 5) %>%
arrange(desc(wstud14))
#finding the 5 baltimore communities with the lowest white student population in 2014
baltimore_white %>%
select(CSA2020, wstud14) %>%
slice_min(wstud14, n = 5) %>%
arrange(wstud14)
#creating top 5 communities with highest reading score table
top_5_communities <- reading_scores %>%
select(Community.Statistical.Area..CSA., X2014) %>%
slice_max(X2014, n = 5) %>%
arrange(desc(X2014))
#creating a chart of my above table with the top 5 baltimore communites with the highest reading scores
top_5_communities %>%
ggplot() +
coord_flip() +
geom_col(aes(x = reorder(Community.Statistical.Area..CSA., X2014), y = X2014)) +
labs(
title = "Percent of 8th grade students passing MSA reading in 2014",
x = "Communities",
y = "Percent of Students",
caption = "Source: Baltimore Neighborhood Indicator Alliance"
)
baltimore_white <- read.csv("Percent_of_Students_that_are_White_(non-Hispanic).csv")
library(tidyverse)
###
# Total population for each Maryland county
# County identified by GEOID (a 5-digit code), not name
###
maryland_county_population <- read_rds("assets/data/maryland_county_population.rds")
###
# A lookup table that shows the name of each Maryland county, paired with GEOID
###
maryland_county_lookup_table <- read_rds("assets/data/maryland_county_lookup_table.rds")
###
# Total population for each Maryland county, EXCEPT for Prince George's County
# County identified by GEOID (a 5-digit code), not name
###
maryland_county_population_no_pg <- read_rds("assets/data/maryland_county_population_no_pg.rds")
###
# Display the tables
###
maryland_county_population
maryland_county_lookup_table
maryland_county_population_no_pg
updated_maryland_county_population <- maryland_county_lookup_table %>%
inner_join(maryland_county_population, by="geoid")
updated_maryland_county_population
updated_maryland_county_population_no_pg <- maryland_county_lookup_table %>%
inner_join(maryland_county_population_no_pg, by="geoid")
updated_maryland_county_population_no_pg
if (knitr::is_html_output())
knitr::include_graphics("assets/inner-join.gif")
# ![inner join](assets/inner-join.gif){width="100%"}
if (knitr::is_html_output())
knitr::include_graphics("assets/inner-join.gif")
# ![inner join](assets/inner-join.gif){width="100%"}
updated_maryland_county_population_no_pg <- maryland_county_lookup_table %>%
left_join(maryland_county_population_no_pg, by="geoid")
updated_maryland_county_population_no_pg
updated_maryland_county_population_no_pg <- maryland_county_lookup_table %>%
left_join(maryland_county_population_no_pg, by="geoid")
updated_maryland_county_population_no_pg
library(tidyverse)
###
# Total population for each Maryland county
# County identified by GEOID (a 5-digit code), not name
###
maryland_county_population <- read_rds("assets/data/maryland_county_population.rds")
###
# A lookup table that shows the name of each Maryland county, paired with GEOID
###
maryland_county_lookup_table <- read_rds("assets/data/maryland_county_lookup_table.rds")
###
# Total population for each Maryland county, EXCEPT for Prince George's County
# County identified by GEOID (a 5-digit code), not name
###
maryland_county_population_no_pg <- read_rds("assets/data/maryland_county_population_no_pg.rds")
###
# Display the tables
###
maryland_county_population
maryland_county_lookup_table
maryland_county_population_no_pg
updated_maryland_county_population <- maryland_county_lookup_table %>%
inner_join(maryland_county_population, by="geoid")
updated_maryland_county_population
updated_maryland_county_population_no_pg <- maryland_county_lookup_table %>%
inner_join(maryland_county_population_no_pg, by="geoid")
updated_maryland_county_population_no_pg
if (knitr::is_html_output())
knitr::include_graphics("assets/inner-join.gif")
# ![inner join](assets/inner-join.gif){width="100%"}
updated_maryland_county_population_no_pg <- maryland_county_lookup_table %>%
inner_join(maryland_county_population_no_pg, by="geoid")
updated_maryland_county_population_no_pg
updated_maryland_county_population <- maryland_county_lookup_table %>%
inner_join(maryland_county_population, by="geoid")
updated_maryland_county_population
updated_maryland_county_population_no_pg <- maryland_county_lookup_table %>%
inner_join(maryland_county_population_no_pg, by="geoid")
updated_maryland_county_population_no_pg
if (knitr::is_html_output())
knitr::include_graphics("assets/inner-join.gif")
# ![inner join](assets/inner-join.gif){width="100%"}
if (knitr::is_html_output())
knitr::include_graphics("assets/inner-join.gif")
# ![inner join](assets/inner-join.gif){width="100%"}
if (knitr::is_html_output())
knitr::include_graphics("assets/inner-join.gif")
# ![inner join](assets/inner-join.gif){width="100%"}
updated_maryland_county_population_no_pg <- maryland_county_lookup_table %>%
left_join(maryland_county_population_no_pg, by="geoid")
updated_maryland_county_population_no_pg
updated_maryland_county_population_no_pg <- maryland_county_lookup_table %>%
anti_join(maryland_county_population_no_pg, by="geoid")
updated_maryland_county_population_no_pg
updated_maryland_county_population_no_pg <- maryland_county_lookup_table %>%
anti_join(maryland_county_population_no_pg, by="geoid")
updated_maryland_county_population_no_pg
if (knitr::is_html_output())
knitr::include_graphics("assets/inner-join.gif")
# ![inner join](assets/inner-join.gif){width="100%"}
if (knitr::is_html_output())
knitr::include_graphics("assets/inner-join.gif")
![inner join](assets/inner-join.gif){width="100%"}
if (knitr::is_html_output())
knitr::include_graphics("assets/inner-join.gif")
# ![inner join](assets/inner-join.gif){width="100%"}
if (knitr::is_html_output())
knitr::include_graphics("assets/left-join.gif")
if (knitr::is_html_output())
knitr::include_graphics("assets/right-join.gif")
updated_maryland_county_population_no_pg <- maryland_county_lookup_table %>%
anti_join(maryland_county_population_no_pg, by="geoid")
updated_maryland_county_population_no_pg
if (knitr::is_html_output())
knitr::include_graphics("assets/anti-join.gif")
if (knitr::is_html_output())
knitr::include_graphics("assets/left-join-extra.gif")
###
# Total population for each top-10 largest Maryland county
# County identified by GEOID (a 5-digit code) and name
###
maryland_large_county_population <- read_rds("assets/data/maryland_large_county_population.rds")
###
# Total population for all other Maryland counties
# County identified by GEOID (a 5-digit code) and name
###
maryland_small_county_population <- read_rds("assets/data/maryland_small_county_population.rds")
# Display
maryland_large_county_population
maryland_small_county_population
all_county_population <- maryland_small_county_population %>%
bind_rows(maryland_large_county_population)
all_county_population
read.xls(maryland_tracts.xls)
rio::import(maryland_tracts.xls)
maryland_tracts <-rio::import("maryland_tracts.xls")
md_countis <- rio::import("md_counties_geoids.txt")
maryland_tracts <-rio::import("maryland_tracts.xls")
md_counties <- rio::import("md_counties_geoids.txt")
maryland_tracts
md
maryland_tracts <-rio::import("maryland_tracts.xls")
md_counties <- rio::import("md_counties_geoids.txt")
maryland_tracts
md_counties
maryland_tracts <-rio::import("maryland_tracts.xls")
md_counties <- rio::import("md_counties_geoids.txt")
view(maryland_tracts)
view(md_counties)
library(tidyverse)
library(janitor)
maryland_tracts <-rio::import("maryland_tracts.xls") %>%
clean_names()
md_counties <- rio::import("md_counties_geoids.txt") %>%
clean_names()
updated_join_table <- maryland_county_lookup_table %>%
inner_join(maryland_county_population, by="geoid")
updated_maryland_county_population
maryland_tracts <-rio::import("maryland_tracts.xls") %>%
clean_names()
md_counties <- rio::import("md_counties_geoids.txt") %>%
clean_names()
view(maryland_tracts)
view(md_counties_geoids)
maryland_tracts <-rio::import("maryland_tracts.xls") %>%
clean_names()
md_counties <- rio::import("md_counties_geoids.txt") %>%
clean_names()
view(maryland_tracts)
view(md_counties_geoids)
maryland_tracts <-rio::import("maryland_tracts.xls") %>%
clean_names()
md_counties <- rio::import("md_counties_geoids.txt") %>%
clean_names()
updated_join_table <- maryland_county_lookup_table %>%
inner_join(maryland_county_population, by="geoid")
updated_maryland_county_population
maryland_tracts <-rio::import("maryland_tracts.xls") %>%
clean_names()
md_counties <- rio::import("md_counties_geoids.txt") %>%
clean_names()
view(maryland_tracts)
updated_join_table <- maryland_county_lookup_table %>%
inner_join(maryland_county_population, by="geoid")
updated_maryland_county_population
maryland_tracts <-rio::import("maryland_tracts.xls") %>%
clean_names()
md_counties <- rio::import("md_counties_geoids.txt") %>%
clean_names()
view(maryland_tracts)
view(md_counties)
updated_join_table <- maryland_county_lookup_table %>%
inner_join(maryland_county_population, by="geoid")
updated_maryland_county_population
maryland_tracts <-rio::import("maryland_tracts.xls") %>%
clean_names()
md_counties <- rio::import("md_counties_geoids.txt") %>%
clean_names()
view(maryland_tracts)
view(md_counties)
maryland_tracts %>%
inner_join(md_counties, by=c("cty"="geoid"))
maryland_tracts <-rio::import("maryland_tracts.xls") %>%
clean_names()
md_counties <- rio::import("md_counties_geoids.txt") %>%
clean_names()
view(maryland_tracts)
view(md_counties)
maryland_tracts %>%
inner_join(md_counties, by=c("cty"="geoid"))
maryland_tracts <-rio::import("maryland_tracts.xls") %>%
clean_names()
md_counties <- rio::import("md_counties_geoids.txt") %>%
clean_names()
view(maryland_tracts)
view(md_counties)
md_smith_data <- maryland_tracts %>%
inner_join(md_counties, by=c("cty"="geoid"))
maryland_tracts <-rio::import("maryland_tracts.xls") %>%
clean_names()
md_counties <- rio::import("md_counties_geoids.txt") %>%
clean_names()
view(maryland_tracts)
view(md_counties)
md_smith_data <- maryland_tracts %>%
inner_join(md_counties, by=c("cty"="geoid"))
view(md_smith_data)
md_smith_data %>%
select(name, census_response_rate2020) %>%
slice_max(census_response_rate2020, n = 10)
arrange(desc(census_response_rate2020))
md_smith_data %>%
select(name, census_response_rate2020) %>%
slice_max(census_response_rate2020, n = 10) %>%
arrange(desc(census_response_rate2020))
md_smith_data %>%
select(name, census_response_rate2020) %>%
slice_max(census_response_rate2020, n = 10) %>%
arrange(desc(census_response_rate2020))
### This code will install the packages required for this project if you don't already have them installed.
packages <- c("sf", "tidyverse", "leaflet", "mapview", "janitor", "lubridate", "tidycensus")
for (pkg in packages) {
if (!require(pkg, character.only = TRUE)) {
install.packages(pkg)
}
### Import our packages into our script here.
library(sf)
library(tidyverse)
library(janitor)
library(leaflet)
library(mapview)
install.packages(pkg)
### Imporintg shooting victims data
victims <- read_csv("data/shooting_victims.csv")
### Imporintg shooting victims data
victims <- read_csv("data/shooting_victims.csv")
### Imporintg shooting victims data
victims <- read_csv("data/shooting_victims.csv")
### Imporintg shooting victims data
library(readr)
shooting_victims <- read_csv("~/Downloads/shooting_victims.csv")
View(shooting_victims)
### Importing shooting events data
shootings <- read_csv("data/shooting_events.csv")
### Imporintg shooting victims data
library(readr)
shooting_victims <- read_csv("~/Downloads/shooting_victims.csv")
View(shooting_victims)
### Importing shooting events data
library(readr)
shooting_events <- read_csv("~/Downloads/shooting_events.csv")
View(shooting_events)
### Importing a spatial feature of each parcel of each high school in Baltimore. notice we use `st_read()` instead of 'read_csv()'
high_schools <- st_read("data/high_school_parcels.geojson")
### Imporintg shooting victims data
library(readr)
shooting_victims <- read_csv("~/Downloads/shooting_victims.csv")
### Importing shooting events data
library(readr)
shooting_events <- read_csv("~/Downloads/shooting_events.csv")
### Importing a spatial feature of each parcel of each high school in Baltimore. notice we use `st_read()` instead of 'read_csv()'
high_schools <- st_read("~/Downloads/high_school_parcels.geojson")
### Imporintg shooting victims data
library(readr)
shooting_victims <- read_csv("~/Downloads/shooting_victims.csv")
### Importing shooting events data
library(readr)
shooting_events <- read_csv("~/Downloads/shooting_events.csv")
### Importing a spatial feature of each parcel of each high school in Baltimore. notice we use `st_read()` instead of 'read_csv()'
high_schools <- st_read("~/Downloads/high_school_parcels.geojson")
view(high_schools)
### First 100 rows
shootings %>%
head(100)
### Imporintg shooting victims data
library(readr)
victims <- read_csv("~/Downloads/shooting_victims.csv")
### Importing shooting events data
library(readr)
shootings <- read_csv("~/Downloads/shooting_events.csv")
### Importing a spatial feature of each parcel of each high school in Baltimore. notice we use `st_read()` instead of 'read_csv()'
high_schools <- st_read("~/Downloads/high_school_parcels.geojson")
view(high_schools)
### First 100 rows
shootings %>%
head(100)
### Let's inspect our parcels dataframe
high_schools %>%
as.data.frame()
mapview(high_schools)
shootings_subset <- shootings %>%
head(300)
mapview(shootings_subset)
### This code will install the packages required for this project if you don't already have them installed.
packages <- c("sf", "tidyverse", "leaflet", "mapview", "janitor", "lubridate", "tidycensus")
for (pkg in packages) {
if (!require(pkg, character.only = TRUE)) {
install.packages(pkg)
}
### Import our packages into our script here.
library(sf)
library(tidyverse)
library(janitor)
library(leaflet)
library(mapview)
### This code will install the packages required for this project if you don't already have them installed.
packages <- c("sf", "tidyverse", "leaflet", "mapview", "janitor", "lubridate", "tidycensus")
for (pkg in packages) {
if (!require(pkg, character.only = TRUE)) {
install.packages(pkg)
}
### Import our packages into our script here.
library(sf)
library(tidyverse)
library(janitor)
library(leaflet)
library(mapview)
### Transform shootings into a spatial object
spatial_shootings <- shootings %>%
### filter out any NA values for longitude and latitude
filter(!is.na(longitude) |
!is.na(latitude)
) %>%
### use the st_as_sf function to define the spatial aspects of our data set
st_as_sf(
coords = c("longitude", "latitude"),
crs = 4326
)
### Transform victims into a spatial object
spatial_victims <- victims %>%
### filter out any NA values for longitude and latitude
filter(!is.na(longitude) |
!is.na(latitude)
) %>%
st_as_sf(
coords = c("longitude", "latitude"),
crs = 4326
)
shootings_subset <- spatial_shootings %>%
head(300)
mapview(shootings_subset,
#changing the size of the markers
cex = 3,
#changing the color of the markers
col.regions="red")
### This code will install the packages required for this project if you don't already have them installed.
packages <- c("sf", "tidyverse", "leaflet", "mapview", "janitor", "lubridate", "tidycensus")
for (pkg in packages) {
if (!require(pkg, character.only = TRUE)) {
install.packages(pkg)
}
### Import our packages into our script here.
library(sf)
library(tidyverse)
library(janitor)
library(leaflet)
library(mapview)
### This code will install the packages required for this project if you don't already have them installed.
packages <- c("sf", "tidyverse", "leaflet", "mapview", "janitor", "lubridate", "tidycensus")
for (pkg in packages) {
if (!require(pkg, character.only = TRUE)) {
install.packages(pkg)
}
### Import our packages into our script here.
library(sf)
library(tidyverse)
library(janitor)
library(leaflet)
library(mapview)
