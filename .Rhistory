TRUE ~ "not_majority_white"
))
#joining spatial data with the majority_white neighborhoods classifications
majority_white_join <- majority_white %>%
inner_join(baltimore_shape_files) %>%
st_as_sf()
homicides_by_neighborhood <- baltimore_homicides %>%
st_join(majority_white_join) %>%
as_tibble()
#create a table that organizes values into columns to mutate a column. this can show us how many cases are solved in majority white neighborhoods and non-majority white neighborhoods
homicides_by_neighborhood %>%
group_by(neighborhood_type,disposition) %>%
count() %>%
pivot_wider(names_from=disposition, values_from=n) %>%
clean_names() %>%
mutate(total_shootings = closed_by_arrest+closed_without_arrest+open_no_arrest) %>%
mutate(unsolved = open_no_arrest + closed_without_arrest) %>%
mutate(pct_unsolved = unsolved/total_shootings*100)
ggplot() +
geom_sf(data=baltimore_shape_files) +
geom_sf(data=baltimore_homicides)
#classify different census tracts as majority white or not
majority_white <- baltimore_demographics %>%
mutate(pct_white = (white_pop/total_pop*100)) %>%
select(geoid,name,pct_white) %>%
mutate(neighborhood_type = case_when(
pct_white > 50 ~ "majority_white",
TRUE ~ "not_majority_white"
))
#joining spatial data with the majority_white neighborhoods classifications
majority_white_join <- majority_white %>%
inner_join(baltimore_shape_files) %>%
st_as_sf()
homicides_by_neighborhood <- baltimore_homicides %>%
st_join(majority_white_join) %>%
as_tibble()
#create a table that organizes values into columns to mutate a column. this can show us how many cases are solved in majority white neighborhoods and non-majority white neighborhoods
homicides_by_neighborhood %>%
group_by(neighborhood_type,disposition) %>%
count() %>%
pivot_wider(names_from=disposition, values_from=n) %>%
clean_names() %>%
mutate(total_shootings = closed_by_arrest+closed_without_arrest+open_no_arrest) %>%
mutate(unsolved = open_no_arrest + closed_without_arrest) %>%
mutate(pct_unsolved = unsolved/total_shootings*100)
ggplot() +
geom_sf(data=baltimore_shape_files) +
geom_sf(data=baltimore_homicides, color = "red")
library(tidyverse)
library(janitor)
library(sf)
###
# Load dataframe of baltimore homicides
###
baltimore_homicides <- read_csv("https://raw.githubusercontent.com/washingtonpost/data-homicides/master/homicide-data.csv") %>%
filter(city == "Baltimore") %>%
st_as_sf(
coords = c("lon","lat"),
crs="NAD83"
)
write_rds(baltimore_homicides,"data/baltimore_homicides.rds")
###
# Load dataframe of Baltimore demographics
###
library(tidycensus)
census_api_key("549950d36c22ff16455fe196bbbd01d63cfbe6cf")
baltimore_tract_demographics <- get_acs(geography = "tract", state="Maryland", variables = c( "B01001_001","B02001_002"), year = 2017) %>%
clean_names() %>%
select(geoid, name, variable, estimate) %>%
pivot_wider(names_from=variable, values_from=estimate) %>%
rename(total_pop = B01001_001,
white_pop = B02001_002
) %>%
filter(str_detect(name,"Baltimore city"))
write_rds(baltimore_tract_demographics,"data/baltimore_tract_demographics.rds")
###
# Load Baltimore tract shapefiles
###
baltimore_tract_shapefiles <- get_acs(geography = "tract", state="Maryland", variables = c( "B01001_001"), year = 2017, geometry = TRUE) %>%
clean_names() %>%
select(geoid,name,geometry) %>%
filter(str_detect(name,"Baltimore city"))
write_rds(baltimore_tract_shapefiles,"data/baltimore_tract_shapefiles.rds")
baltimore_homicides <- read_rds("data/baltimore_homicides.rds")
baltimore_tract_demographics <- read_rds("data/baltimore_tract_demographics.rds")
baltimore_tract_shapefiles <- read_rds("data/baltimore_tract_shapefiles.rds")
###
# Classify each tract as majority white or not
###
majority_white_tracts <- baltimore_tract_demographics %>%
mutate(pct_white = white_pop/total_pop) %>%
select(geoid,name,pct_white) %>%
mutate(neighborhood_type = case_when(
pct_white > .50 ~ "majority_white",
TRUE ~ "not_majority_white"
))
###
# Connect classified neighborhood file to spatial data
###
majority_white_tracts <- majority_white_tracts %>%
inner_join(baltimore_tract_shapefiles) %>%
st_as_sf()
###
# Spatial join to assign each shooting to a tract
###
shootings_by_neighborhood <- baltimore_homicides %>%
st_join(majority_white_tracts) %>%
as_tibble()
###
# Calculate the percentage of unsolved homicides in white and non-white neighborhoods
###
case_status_by_neighborhood <- shootings_by_neighborhood %>%
group_by(neighborhood_type,disposition) %>%
count() %>%
pivot_wider(names_from=disposition, values_from=n) %>%
clean_names() %>%
mutate(total_shootings = closed_by_arrest+closed_without_arrest+open_no_arrest) %>%
mutate(unsolved = open_no_arrest + closed_without_arrest) %>%
mutate(pct_unsolved = unsolved/total_shootings*100)
case_status_by_neighborhood
###
# Output map
###
ggplot() +
geom_sf(data=baltimore_tract_shapefiles) +
geom_sf(data=baltimore_homicides)
library(tidyverse)
baltcity_income<- read_csv("https://raw.githubusercontent.com/wellsdata/data_journalism_class/main/04_labs/lab_05/pre_lab_05/baltcity_income_clean.csv") %>%
as.data.frame()
baltcity_income<- read_csv("https://raw.githubusercontent.com/wellsdata/data_journalism_class/main/04_labs/lab_05/pre_lab_05/baltcity_income_clean.csv") %>%
as.data.frame()
view(baltcity_income)
baltcity_income %>%
select (Census, Neighborhood, x2020) %>%
total_income = sum(x2020, na.rm = TRUE) %>%
mutate (pct_whole = (x2020/total_income) %>%
head ()
baltcity_income %>%
select (Census, Neighborhood, x2020) %>%
total_income = sum(x2020, na.rm = TRUE) %>%
mutate (pct_whole = (x2020/total_income) %>%
baltcity_income %>%
select (Census, Neighborhood, x2020) %>%
total_income = sum(x2020, na.rm = TRUE) %>%
mutate (pct_whole = (x2020/total_income))
library(tidyverse)
library(tidycensus)
library(janitor)
census_api_key("275c92ecf966417aec509ef232bf2fbc618b17e6", install=TRUE, overwrite = TRUE)
pl_2020 <- load_variables(2020, "pl", cache = TRUE)
pl_2020
total_pop_2020 <- get_decennial(geography="state", variables="P1_001N", year=2020)
total_pop_2020
total_pop_2020 <- get_decennial(geography="state", variables="P1_001N", year=2020) %>%
arrange(desc(value))
total_pop_2020
total_pop_2020 <- get_decennial(geography="state", variables="P1_001N", year=2020) %>%
clean_names() %>%
arrange(desc(value)) %>%
rename(total_population = value,
state = name) %>%
select(state, total_population)
total_pop_2020
pct_white_2020 <- get_decennial(geography="us", variables=c("P1_001N","P1_003N"), year=2020)
pct_white_2020
pct_white_2020 <- get_decennial(geography="us", variables=c("P1_001N","P1_003N"), year=2020, output="wide")
pct_white_2020
pct_white_2020 <- get_decennial(geography="us", variables=c("P1_001N","P1_003N"), year=2020, output="wide") %>%
rename(geography = NAME,
total_pop = P1_001N,
white_pop = P1_003N) %>%
select(-GEOID)
pct_white_2020
pct_white_2020 <- get_decennial(geography="us", variables=c("P1_001N","P1_003N"), year=2020, output="wide") %>%
rename(geography = NAME,
total_pop = P1_001N,
white_pop = P1_003N) %>%
select(-GEOID) %>%
mutate(pct_white = white_pop/total_pop*100)
pct_white_2020
md <- get_acs(geography = "county",
variables = c(median_income = "B19013_001"),
state = "MD",
year = 2020) %>%
arrange(desc(estimate))
md
md %>%
mutate(NAME = gsub(" County, Maryland", "", NAME)) %>%
ggplot(aes(x = estimate, y = reorder(NAME, estimate))) +
geom_errorbarh(aes(xmin = estimate - moe, xmax = estimate + moe)) +
geom_point(color = "red") +
labs(title = "Household income by county in Maryland",
subtitle = "2015-2019 American Community Survey",
y = "",
x = "ACS estimate (bars represent margin of error)")
acs_variable <- load_variables(dataset = "acs5", year=2020)
pct_white_2020 <- get_decennial(geography="us", variables=c("P1_001N","P1_003N"), year=2020)
pct_white_2020
md <- get_acs(geography = "county",
variables = c(median_income = "B19013_001"),
state = "MD",
year = 2020) %>%
arrange(desc(estimate))
md
acs_variable <- load_variables(dataset = "acs5", year=2020)
view (acs_variable)
acs_variable <- load_variables(dataset = "acs5", year=2020)
pl_2020 <- load_variables(2020, "pl", cache = TRUE)
view(pl_2020)
male <- get_acs (geography = "state",
variables = c(male_population - "B19013_001"),
year = 2020) %>%
arrnage(desc(estimate))
male <- get_acs (geography = "state",
variables = c(male_population - "B19013_001"),
year = 2020) %>%
arrange(desc(estimate))
male <- get_acs (geography = "state",
variables = c(male_population = "B19013_001"),
year = 2020) %>%
arrange(desc(estimate))
male <- get_acs (geography = "state",
variables = c(male_population = "B19013_001"),
year = 2020) %>%
arrange(desc(estimate))
male <- get_acs (geography = "state",
variables = c(male_population = "B19013_001"),
year = 2020) %>%
arrange(desc(estimate))
male <- get_acs (geography = "state",
variables = c(male_population = "B19013_001"),
year = 2020) %>%
arrange(desc(estimate))
view(male)
male_population <- get_acs %>%
total_pop <- get_decennial(geography="state", variables="P1_001N", year=2020)
acs_variable <- load_variables(dataset = "acs5", year=2020)
male <- get_acs (geography = "state",
variables = c(male_population = "B19013_001"),
year = 2020) %>%
arrange(desc(estimate))
view(male)
view(get_acs)
View(ads1)
View(total_pop_2020)
library(tidyverse)
library(tidycensus)
library(janitor)
census_api_key("275c92ecf966417aec509ef232bf2fbc618b17e6", install=TRUE, overwrite = TRUE)
pl_2020 <- load_variables(2020, "pl", cache = TRUE)
total_pop_2020 <- get_decennial(geography="state", variables="P1_001N", year=2020)
total_pop_2020
total_pop_2020 <- get_decennial(geography="state", variables="P1_001N", year=2020) %>%
arrange(desc(value))
total_pop_2020
total_pop_2020 <- get_decennial(geography="state", variables="P1_001N", year=2020) %>%
clean_names() %>%
arrange(desc(value)) %>%
rename(total_population = value,
state = name) %>%
select(state, total_population)
total_pop_2020
pct_white_2020 <- get_decennial(geography="us", variables=c("P1_001N","P1_003N"), year=2020)
pct_white_2020
pct_white_2020 <- get_decennial(geography="us", variables=c("P1_001N","P1_003N"), year=2020, output="wide")
pct_white_2020
pct_white_2020 <- get_decennial(geography="us", variables=c("P1_001N","P1_003N"), year=2020, output="wide") %>%
rename(geography = NAME,
total_pop = P1_001N,
white_pop = P1_003N) %>%
select(-GEOID)
pct_white_2020
pct_white_2020 <- get_decennial(geography="us", variables=c("P1_001N","P1_003N"), year=2020, output="wide") %>%
rename(geography = NAME,
total_pop = P1_001N,
white_pop = P1_003N) %>%
select(-GEOID) %>%
mutate(pct_white = white_pop/total_pop*100)
pct_white_2020
md <- get_acs(geography = "county",
variables = c(median_income = "B19013_001"),
state = "MD",
year = 2020) %>%
arrange(desc(estimate))
md
md %>%
mutate(NAME = gsub(" County, Maryland", "", NAME)) %>%
ggplot(aes(x = estimate, y = reorder(NAME, estimate))) +
geom_errorbarh(aes(xmin = estimate - moe, xmax = estimate + moe)) +
geom_point(color = "red") +
labs(title = "Household income by county in Maryland",
subtitle = "2015-2019 American Community Survey",
y = "",
x = "ACS estimate (bars represent margin of error)")
acs_variable <- load_variables(dataset = "acs5", year=2020)
male <- get_acs (geography = "state",
variables = c(male_population = "B19013_001"),
year = 2020) %>%
arrange(desc(estimate))
male %>%
select (name, variable, estimate) %>%
mutate (male_percent = (estimate/sum(estimate)) %>%
male <- get_acs (geography = "state",
variables = c(male_population = "B19013_001"),
year = 2020) %>%
arrange(desc(estimate))
male <0 male %>%
male <- get_acs (geography = "state",
variables = c(male_population = "B19013_001"),
year = 2020) %>%
arrange(desc(estimate))
male <- male %>%
select (name, variable, estimate) %>%
mutate (male_percent = (estimate/sum(estimate)* 100) %>%
male <- get_acs (geography = "state",
variables = c(male_population = "B19013_001"),
year = 2020) %>%
arrange(desc(estimate))
male <- male %>%
select (name, variable, estimate) %>%
mutate (male_percent = (estimate/sum(estimate))* 100)
male <- get_acs (geography = "state",
variables = c(male_population = "B19013_001"),
year = 2020) %>%
arrange(desc(estimate))
colnames(male)
male <- male %>%
select (name, variable, estimate) %>%
mutate (male_percent = (estimate/sum(estimate))* 100)
male <- get_acs (geography = "state",
variables = c(male_population = "B19013_001"),
year = 2020) %>%
arrange(desc(estimate))
colnames(male)
male <- male %>%
select (NAME, variable, estimate) %>%
mutate (male_percent = (estimate/sum(estimate))* 100)
male <- get_acs (geography = "state",
variables = c(male_population = "B19013_001"),
year = 2020) %>%
arrange(desc(estimate))
male <- male %>%
select (NAME, variable, estimate) %>%
mutate (male_percent = (estimate/sum(estimate))* 100)
male <- get_acs (geography = "state",
variables = c(male_population = "B19013_001"),
year = 2020) %>%
arrange(desc(estimate))
male <- male %>%
select (NAME, variable, estimate) %>%
mutate (male_percent = (estimate/sum(estimate))* 100)
view(male)
male <- get_acs (geography = "state",
variables = c(male_population = "B19013_001"),
year = 2020) %>%
arrange(desc(estimate))
view(total_pop_2020)
male <- male %>%
select (NAME, variable, estimate) %>%
mutate (male_percent = (estimate/sum())* 100)
view(male)
male <- get_acs (geography = "state",
variables = c(male_population = "B19013_001"),
year = 2020) %>%
arrange(desc(estimate))
view(total_pop_2020)
joined_table <- total_pop_2020 %>%
inner_join(male, by c("state" = "name"))
male <- get_acs (geography = "state",
variables = c(male_population = "B19013_001"),
year = 2020) %>%
arrange(desc(estimate))
view(total_pop_2020)
joined_table <- total_pop_2020 %>%
inner_join(male, by c("state" = "name"))
joined_table <- total_pop_2020 %>%
inner_join(male, by c("state" = "name"))
male <- get_acs (geography = "state",
variables = c(male_population = "B19013_001"),
year = 2020) %>%
arrange(desc(estimate))
joined_table <- total_pop_2020 %>%
inner_join(male, by c("state" = "name"))
male <- get_acs (geography = "state",
variables = c(male_population = "B19013_001"),
year = 2020) %>%
arrange(desc(estimate))
joined_table <- total_pop_2020 %>%
inner_join(male, by c("name" = "state"))
male <- get_acs (geography = "state",
variables = c(male_population = "B19013_001"),
year = 2020) %>%
arrange(desc(estimate))
joined_table <- total_pop_2020 %>%
inner_join(male, by = c("name" = "state"))
male <- get_acs (geography = "state",
variables = c(male_population = "B19013_001"),
year = 2020) %>%
arrange(desc(estimate))
joined_table <- total_pop_2020 %>%
inner_join(male, by = c("NAME" = "state"))
male <- get_acs (geography = "state",
variables = c(male_population = "B19013_001"),
year = 2020) %>%
arrange(desc(estimate))
joined_table <- total_pop_2020 %>%
inner_join(male, by = c("state" = "NAME"))
#joined_table %>%
# select (NAME, variable, estimate) %>%
# mutate (male_percent = (estimate/sum())* 100)
#view(male)
male <- get_acs (geography = "state",
variables = c(male_population = "B19013_001"),
year = 2020) %>%
arrange(desc(estimate))
joined_table <- total_pop_2020 %>%
inner_join(male, by = c("state" = "NAME"))
joined_table
#joined_table %>%
# select (NAME, variable, estimate) %>%
# mutate (male_percent = (estimate/sum())* 100)
#view(male)
male <- get_acs (geography = "state",
variables = c(male_population = "B19013_001"),
year = 2020) %>%
arrange(desc(estimate))
joined_table <- total_pop_2020 %>%
inner_join(male, by = c("state" = "NAME"))
joined_table %>%
select (NAME, variable, estimate) %>%
mutate (male_percent = (estimate/sum(total_population))* 100)
male <- get_acs (geography = "state",
variables = c(male_population = "B19013_001"),
year = 2020) %>%
arrange(desc(estimate))
joined_table <- total_pop_2020 %>%
inner_join(male, by = c("state" = "NAME"))
view(joined_table)
joined_table %>%
select (NAME, variable, estimate) %>%
mutate (male_percent = (estimate/sum(total_population))* 100)
male <- get_acs (geography = "state",
variables = c(male_population = "B19013_001"),
year = 2020) %>%
arrange(desc(estimate))
joined_table <- total_pop_2020 %>%
inner_join(male, by = c("state" = "NAME"))
view(joined_table)
joined_table %>%
select (state, estimate, total_population, male_percent) %>%
mutate (male_percent = (estimate/sum(total_population))* 100)
male <- get_acs (geography = "state",
variables = c(male_population = "B19013_001"),
year = 2020) %>%
arrange(desc(estimate))
joined_table <- total_pop_2020 %>%
inner_join(male, by = c("state" = "NAME"))
view(joined_table)
joined_table %>%
select (state, estimate, total_population) %>%
mutate (male_percent = (estimate/sum(total_population))* 100)
view(joined_table)
male <- get_acs (geography = "state",
variables = c(male_population = "B19013_001"),
year = 2020) %>%
arrange(desc(estimate))
joined_table <- total_pop_2020 %>%
inner_join(male, by = c("state" = "NAME"))
view(joined_table)
joined_table %>%
select (state, estimate, total_population) %>%
mutate (male_percent = (estimate/sum(total_population))* 100)
male <- get_acs (geography = "state",
variables = c(male_population = "B19013_001"),
year = 2020) %>%
arrange(desc(estimate))
joined_table <- total_pop_2020 %>%
inner_join(male, by = c("state" = "NAME"))
joined_table %>%
select (state, estimate, total_population) %>%
mutate (male_percent = (estimate/sum(total_population))* 100)
male <- get_acs (geography = "state",
variables = c(male_population = "B19013_001"),
year = 2020) %>%
arrange(desc(estimate))
joined_table <- total_pop_2020 %>%
inner_join(male, by = c("state" = "NAME"))
joined_table %>%
select (state, estimate, total_population) %>%
mutate (male_percent = (estimate/total_population)* 100)
male <- get_acs (geography = "state",
variables = c(male_population = "B19013_001"),
year = 2020) %>%
arrange(desc(estimate))
joined_table <- total_pop_2020 %>%
inner_join(male, by = c("state" = "NAME"))
joined_table %>%
select (state, estimate, total_population) %>%
mutate (male_percent = (estimate/total_population)* 100) %>%
arrange(desc(male_percent))
acs_variable <- load_variables(dataset = "acs5", year=2020)
view(acs_variable)
male <- get_acs (geography = "state",
variables = c(male_population = "B01001_002"),
year = 2020) %>%
arrange(desc(estimate))
joined_table <- total_pop_2020 %>%
inner_join(male, by = c("state" = "NAME"))
joined_table %>%
select (state, estimate, total_population) %>%
mutate (male_percent = (estimate/total_population)* 100) %>%
arrange(desc(male_percent))
